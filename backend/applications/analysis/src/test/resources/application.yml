kraken:
  gatling:
    results:
      root: gatling/results
  analysis:
    url: http://localhost:8083
    runner:
      root: gatling/runner
      script: runner.sh
      cancel: onCancel.sh
    debugger:
      root: gatling/debugger
      script: debugger.sh
      cancel: onCancel.sh
    recorder:
      root: gatling/recorder
      script: recorder.sh
  storage:
    url: http://localhost:8080
  command:
    url: http://localhost:8081
  grafana:
    url: http://localhost:3000
    dashboard: grafana/grafana-gatling-dashboard.json
    user: admin
    password: kraken
  influxdb:
    url: http://localhost:8086
    user: admin
    password: kraken
    database: gatling
    docker-url: http://kraken-influxdb-dev:8086 # InfluxDb URL from docker containers (localhost won't work here so we must use the container name)

spring:
  servlet:
    multipart:
      enabled: true # Whether to enable support of multipart uploads.
      file-size-threshold: 0B # Threshold after which files are written to disk.
      location: # Intermediate location of uploaded files.
      max-file-size: 1MB # Max file size.
      max-request-size: 10MB # Max request size.
      resolve-lazily: false # Whether to resolve the multipart request lazily at the time of file or parameter access.

logging:
  level:
    root: INFO
  com:
    kraken: INFO

server:
  port: 8083
  error:
    include-stacktrace: always

---
spring:
  profiles: prod

kraken:
  #  data: must be given using env variable KRAKEN_DATA
  #  host.data: must be given as using env variable KRAKEN_HOST_DATA
  #  host.uid: must be given as using env variable KRAKEN_HOST_UID
  #  host.gid: must be given as using env variable KRAKEN_HOST_GID
  analysis:
    url: http://kraken-analysis:8083
  storage:
    url: http://kraken-storage:8080
  command:
    url: http://kraken-executor:8081
  grafana:
    url: http://kraken-grafana:3000
  influxdb:
    url: http://kraken-influxdb:8086
    docker-url: http://kraken-influxdb:8086