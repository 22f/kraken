plugins {
//    Uncomment only to get license info : https://github.com/hierynomus/license-gradle-plugin/issues/161
//    id 'com.github.hierynomus.license-report' version '0.15.0'
//    https://github.com/ben-manes/gradle-versions-plugin
//    id "com.github.ben-manes.versions" version "0.27.0"

    id 'io.freefair.lombok' version '5.1.0'
    id 'org.springframework.boot' version '2.3.0.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'java'
    id 'java-library'
    id 'com.github.spotbugs' version '4.0.4'
    id 'idea'
}

allprojects {
    apply plugin: 'jacoco'

    group = 'com.kraken'
    version = '0.0.1-SNAPSHOT'

    repositories {
        mavenCentral()
        // TODO A supprimer
        maven {
            url "https://www.license4j.com/maven/"
        }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    jacoco {
        toolVersion = '0.8.5'
    }
}

subprojects {
    repositories {
        maven {
            url "https://www.license4j.com/maven/"
        }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    buildscript {
        repositories {
            mavenCentral()
        }
    }

    ext {
        springBootVersion = '2.2.6.RELEASE'
        springReactorVersion = '3.3.5.RELEASE'
        springSecurityVersion = '5.3.1.RELEASE'
        guavaVersion = '28.2-jre'
        equalsVerifierVersion = '3.1.12'
        ztZipVersion = '1.14'
        okhttpVersion = '4.4.0'
        jacksonVersion = '2.10.2'
    }

    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'com.github.spotbugs'
    apply plugin: 'io.freefair.lombok'

    sourceCompatibility = 14

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-webflux'
        testImplementation('org.springframework.boot:spring-boot-starter-test') {
            exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        }
        testImplementation 'io.projectreactor:reactor-test'

        // https://mvnrepository.com/artifact/com.google.guava/guava
        implementation group: 'com.google.guava', name: 'guava', version: guavaVersion
        // https://mvnrepository.com/artifact/com.google.guava/guava-testlib
        testImplementation group: 'com.google.guava', name: 'guava-testlib', version: guavaVersion

        // https://mvnrepository.com/artifact/nl.jqno.equalsverifier/equalsverifier
        testImplementation group: 'nl.jqno.equalsverifier', name: 'equalsverifier', version: equalsVerifierVersion
        // https://mvnrepository.com/artifact/com.google.code.findbugs/annotations
        implementation group: 'com.google.code.findbugs', name: 'annotations', version: '3.0.1'
    }

    dependencyManagement {
        imports { mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}") }
    }

    test {
        useJUnitPlatform {
            excludeTags 'integration'
        }
    }

    configurations {
        testArtifacts.extendsFrom testRuntime
    }

    task testJar(type: Jar) {
        archiveClassifier.set('test')
        from sourceSets.test.output
    }

    artifacts {
        testArtifacts testJar
    }

    jacocoTestReport {
        reports {
            html.enabled = true
            xml.enabled = true
            csv.enabled = false
        }
    }

    check.dependsOn jacocoTestReport

    spotbugsMain {
        excludeFilter = file("$rootProject.projectDir/spotbugs-exclude.xml")
        reports {
            xml.enabled = false
            html.enabled = true
        }
    }

    spotbugsTest {
        reports {
            xml.enabled = false
            html.enabled = true
        }
    }

    check.dependsOn spotbugsMain
}

task jacocoRootReport(type: JacocoReport) {
    dependsOn = subprojects.test
    additionalSourceDirs.setFrom files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories.setFrom files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories.setFrom files(subprojects.sourceSets.main.output)
    executionData.setFrom project.fileTree(dir: '.', include: '**/build/jacoco/test.exec')
    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
    }
    onlyIf = {
        true
    }
    doFirst {
        getExecutionData().setFrom(files(executionData.findAll {
            it.exists()
        }))
    }
}